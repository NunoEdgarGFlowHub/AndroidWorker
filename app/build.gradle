apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'checkstyle'

apply plugin: 'kotlin-kapt'

kapt {
    correctErrorTypes = true
    useBuildCache = true
}

android {
    compileSdkVersion Versions.compileSdk
    defaultConfig {
        applicationId Versions.appId
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.appVersionCode
        versionName Versions.appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        
        multiDexEnabled true

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local_connection.properties").newDataInputStream())

        buildConfigField "String", "websocketUrl", properties.getProperty("websocket_url", "")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "framework"
    productFlavors {
        dl4j {

        }
        tfLite {

        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file("./quality/lint.xml")
    }

    // Required by DL4J
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/INDEX.LIST'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation MainApplicationDependencies.kotlin
    implementation MainApplicationDependencies.coroutines
    implementation MainApplicationDependencies.appCompat
    implementation MainApplicationDependencies.rxJava
    implementation MainApplicationDependencies.rxAndroid
    implementation (MainApplicationDependencies.workManager) {
        exclude group: 'com.google.guava', module: 'listenablefuture' // Already in DL4J
    }

    implementation MainApplicationDependencies.multiDex
    implementation MainApplicationDependencies.archComponentLifeCycleExtensions
    implementation MainApplicationDependencies.archComponentLifeCycleViewModel

    implementation MainApplicationDependencies.dagger
    kapt MainApplicationDependencies.daggerCompiler
    implementation MainApplicationDependencies.assistedInjectAnnotations
    kapt MainApplicationDependencies.assistedInjectProcessor

    // Tools
    implementation ToolsDependencies.npy

    // DL4J
    dl4jImplementation (DL4JDependencies.dl4j) {
        exclude group: 'org.bytedeco', module: 'opencv-platform'
        exclude group: 'org.bytedeco', module: 'leptonica-platform'
        exclude group: 'org.bytedeco', module: 'hdf5-platform'
        exclude group: 'org.nd4j', module: 'nd4j-base64'
    }
    dl4jImplementation DL4JDependencies.nd4jNative
    dl4jImplementation DL4JDependencies.nd4jNativeArm
    dl4jImplementation DL4JDependencies.nd4jNativeArm64
    dl4jImplementation DL4JDependencies.nd4jNativeX86
    dl4jImplementation DL4JDependencies.nd4jNativeX86_64

    dl4jImplementation DL4JDependencies.openblas
    dl4jImplementation DL4JDependencies.openblasAndroidArm
    dl4jImplementation DL4JDependencies.openblasAndroidArm64
    dl4jImplementation DL4JDependencies.openblasAndroidX86
    dl4jImplementation DL4JDependencies.openblasAndroidX86_64

    dl4jImplementation DL4JDependencies.opencv
    dl4jImplementation DL4JDependencies.opencvAndroidArm
    dl4jImplementation DL4JDependencies.opencvAndroidArm64
    dl4jImplementation DL4JDependencies.opencvAndroidX86
    dl4jImplementation DL4JDependencies.opencvAndroidX86_64

    dl4jImplementation DL4JDependencies.leptonica
    dl4jImplementation DL4JDependencies.leptonicaAndroidArm
    dl4jImplementation DL4JDependencies.leptonicaAndroidArm64
    dl4jImplementation DL4JDependencies.leptonicaAndroidX86
    dl4jImplementation DL4JDependencies.leptonicaAndroidX86_64

    dl4jImplementation DL4JDependencies.gson
    dl4jAnnotationProcessor DL4JDependencies.lombok

    dl4jImplementation 'com.google.code.findbugs:annotations:3.0.1', {
        exclude module: 'jsr305'
        exclude module: 'jcip-annotations'
    }

    implementation project(path: ':domain')
    implementation project(path: ':datasource')

    // Testing
    testImplementation UnitTestDependencies.junit
    testImplementation UnitTestDependencies.mockk

    androidTestImplementation InstrumentationDependencies.testRunner
    androidTestImplementation InstrumentationDependencies.espressoCore


    //This corrects for a junit version conflict.
    configurations.all {
        resolutionStrategy.force UnitTestDependencies.junit
    }
}

configurations {
    ktlint
    dl4jImplementation
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}

task staticAnalysis(type: GradleBuild) {
    description 'Run all static analysis tasks'
    tasks = ['ktlint']
}

check.dependsOn ktlint

dependencies {
    ktlint ToolsDependencies.ktlint
}